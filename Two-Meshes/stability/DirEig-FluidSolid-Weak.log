  ... : ------" << endl;
   37 :
   38 : cout << "--- shift  = " << freqs << endl;
   39 : cout << "-------------------------------------------------
  ... : ------" << endl;
   40 :
   41 : mesh thf=readmesh("../mesh/meshF-L-"+L+"-H-"+H+".msh");
   42 : mesh ths=readmesh("../mesh/meshS-L-"+L+"-H-"+H+".msh");
   43 :
   44 : func  Pku=P2;
   45 : func  Pkp=P1;
   46 :
   47 : fespace fuupf(thf,[Pku,Pku,Pkp]);
   48 : fespace fppf(thf,[Pkp,Pkp]);
   49 : fespace fuuuuf(thf,[Pku,Pku,Pku,Pku]);
   50 : fespace fuuuus(ths,[Pku,Pku,Pku,Pku]);
   51 :
   52 : int ndofe,ndoff,ndofs,ndoft;
   53 : ndoff=fuupf.ndof;
   54 : ndofs=fuuuus.ndof;
   55 :
   56 : fuupf [u0,v0,p0];
   57 :
   58 : matrix<complex> FS,Pfe,A,B;
   59 :
   60 : {
   61 :  ifstream file("../baseflow/Baseflow1-Re-"+Re+"-L-"+L+"-H-"+H+".txt");
   62 :  file >> u0[];
   63 : };
   64 :
   65 : /////////  Interpolation matrix ///////////////
   66 :
   67 :
   68 : {
   69 : matrix FSR=interpolate(fuuuuf,fuuuus); FS = FSR;
   70 : };
   71 :
   72 : /////////// Operateur de Prolongation /////////////
   73 :
   74 : {
   75 :         fppf [dfe,dge];
   76 :         int npdof = fppf.ndof;
   77 :      int kenew=0; ndofe=0.;
   78 :
   79 :      varf vone([df,dg],[dft,dgt]) = on(FE,df=1,dg=1);
   80 :         dfe[]=vone(0,fppf,tgv=1);
   81 :      ndofe=dfe[].sum;
   82 :
   83 :      complex[int,int] PPe(npdof,ndofe);
   84 :
   85 :         for(int k=0; k<npdof; k++)
   86 :         {
   87 :             if(dfe[][k]==1)
   88 :          {
   89 :           PPe(k,kenew)=1; kenew+=1;
   90 :          };
   91 :         };
   92 :
   93 :         Pfe = PPe;
   94 : };
   95 :
   96 : ndoft=ndoff+ndofs+ndofe;
   97 :
   98 : cout << "ndof-fluid   = " << ndoff << endl;
   99 : cout << "ndof-elastic = " << ndofe << endl;
  100 : cout << "ndof-solid   = " << ndofs << endl;
  101 : cout << "ndof-total   = " << ndoft << endl;
  102 :
  103 : //////////////////////////////////////////////////////
  104 :
  105 : {
  106 :
  107 : cout << "Construction Matrix A-shift B" << endl;
  108 :
  109 : ///////// First line/ Fluid equation /////////////////
  110 :
  111 : varf vmatff([du,dv,dp],[ut,vt,pt])=
  112 : int2d(thf)( - shift*(du*ut+dv*vt)
  113 :                 -( du*dx(u0)+dv*dy(u0) + u0*dx(du)+v0*dy(du) )*ut
  114 :                 -( du*dx(v0)+dv*dy(v0) + u0*dx(dv)+v0*dy(dv) )*vt
  115 :                 - 2*nu*(dx(du)*dx(ut)+dy(dv)*dy(vt))
  116 :              - nu*(dx(dv)+dy(du))*(dy(ut)+dx(vt))
  117 :                 + (dx(ut)+dy(vt))*dp
  118 :                 + (dx(du)+dy(dv))*pt)
  119 :                 + on(4,dv=1.) + on(1,FR,du=1.,dv=1.);
  120 :
  121 : varf vmatfeb([df,dg],[ut,vt,pt])
  122 : =int1d(thf,FE)( -df*ut - dg*vt );
  123 :
  124 : matrix<complex> Aff,Afeb;
  125 :
  126 :
  127 : Aff = vmatff(fuupf,fuupf,solver=GMRES,tgv=tgv1);
  128 :
  129 : {
  130 : matrix<complex> At = vmatfeb(fppf,fuupf); Afeb = At*Pfe;
  131 : };
  132 :
  133 : ///////// 3rd line: Elastic boundary equation ////////////
  134 :
  135 :
  136 : matrix<complex> Aebs,Aebf;
  137 :
  138 : varf vmatebf([duf,dvf,dpf],[ft,gt]) = int1d(thf,FE)(-duf*ft-dvf*gt);
 
  139 :
  140 : varf vmatebs([dxs,dys,dus,dvs],[ft,gt])
  141 : = int1d(thf,FE)( (dus - dxs*dx(u0) - dys*dy(u0) )*ft
  142 :                         +(dvs - dxs*dx(v0) - dys*dy(v0) )*gt );
  143 :
  144 : {
  145 : matrix<complex> At = vmatebf(fuupf,fppf);
  146 : Aebf=Pfe'*At;
  147 : };
  148 :
  149 : {
  150 : matrix<complex> Atf = vmatebs(fuuuuf,fppf);
  151 : matrix<complex> Ats =Atf*FS;
  152 : Aebs=Pfe'*Ats;
  153 : };
  154 :
  155 : ///////// 2nd line: Elastic solid equation /////////////////
  156 :
  157 : matrix<complex> Ass,Aseb;
  158 :
  159 : varf vmatss([dxs,dys,dus,dvs],[xst,yst,ust,vst]) =
  160 : int2d(ths)(
  161 :     - shift*(dxs*xst+dys*yst+dus*ust+dvs*vst)
  162 :     - rho*Lambda*(dx(dxs)+dy(dys))*(dx(ust)+dy(vst))
  163 :     - rho*Mu*( dx(dxs)*dx(ust) + dx(dys)*dx(vst) + dy(dxs)*dy(ust) + dy(ñ¹/dys)*dy(vst) )
  164 :     - rho*Mu*( dx(dxs)*dx(ust) + dy(dxs)*dx(vst) + dx(dys)*dy(ust) + dy(ñ¹/dys)*dy(vst) )
  165 :     + dus*xst + dvs*yst )
  166 :     + on(ER,dxs=1,dys=1,dus=1,dvs=1);
  167 :
  168 : varf vmatseb([df,dg],[xst,yst,ust,vst])
  169 : = int1d(thf,FE)(rho*(df*ust+dg*vst));
  170 :
  171 : Ass=vmatss(fuuuus,fuuuus,solver=GMRES,tgv=tgv1);
  172 :
  173 : {
  174 : matrix<complex> Atf = vmatseb(fppf,fuuuuf);
  175 : matrix<complex> Ats =FS'*Atf;
  176 : Aseb=Ats*Pfe;
  177 : };
  178 :
  179 : cout << "Assemblage Matrix A-shiftB" << endl;
  180 :
  181 : A=[ [ Aff ,   0 , Afeb],
  182 :         [0   , Ass , Aseb],
  183 :      [Aebf, Aebs ,   0]];
  184 :
  185 : cout << "Construction Matrix B " << endl;
  186 :
  187 : varf vmatBff([du,dv,dp],[ut,vt,pt])=
  188 : int2d(thf)( du*ut+dv*vt );
  189 :
  190 : varf vmatBss([xs,ys,us,vs],[xst,yst,ust,vst]) =
  191 : int2d(ths)( xs*xst+ys*yst+us*ust+vs*vst );
  192 :
  193 : varf vmatBee([us,vs],[ust,vst]) =
  194 : int1d(thf,FE)( 0.*(us*ust+vs*vst) );
  195 :
  196 : matrix<complex> Bff,Bss,Bee;
  197 :
  198 : Bff = vmatBff(fuupf,fuupf);
  199 : Bss = vmatBss(fuuuus,fuuuus);
  200 : {
  201 : matrix<complex> Bt = vmatBee(fppf,fppf);
  202 : matrix<complex> Btt = Pfe'*Bt;
  203 : Bee=Btt*Pfe;
  204 : };
  205 :
  206 :
  207 : cout << "Assemblage B" << endl;
  208 :
  209 : B=[ [ Bff ,  0  ,   0],
  210 :     [  0 ,       Bss ,   0],
  211 :     [   0 ,  0  , Bee]];
  212 :
  213 : };
  214 :
  215 : cout << "Factorisation A- shift B " << endl;
  216 : verbosity=10;
  217 : set(A,solver=sparsesolver);
  218 : verbosity=0;
  219 :
  220 : complex[int] eig(nev); // to store nev eigein value
  221 : complex[int,int] vect(ndoft,nev);   // to store nev eigen vector
  222 :
  223 : cout << "Solve Eigenvalue Problem " << endl;
  224 :
  225 : int kk=EigenValue(A,B,sigma=shift,value=eig,rawvector=vect,tol=1e-10,maxñ¹/it=100,ncv=100);
  226 :
  227 : fuupf<complex> [ufc,vfc,pfc];
  228 : fuuuus<complex> [xsc,ysc,usc,vsc];
  229 : fppf<complex> [fc,gc];
  230 :
  231 : fuupf [ufr,vfr,pfr];
  232 : fuuuus [xsr,ysr,usr,vsr];
  233 : fppf [fr,gr];
  234 :
  235 :
  236 : cout << "Write Eigenvalues/Eigenvectors " << endl;
  237 :
  238 : {
  239 : ofstream file("DirEigFluidSolid-Re-"+Re+"-L-"+L+"-H-"+H+"-K-"+K+"-rho-"+ñ¹/rho+".dat",append);
  240 :
  241 : for(int j=0; j<nev; j++)
  242 : {
  243 :  cout << real(eig(j)) << " " << imag(eig(j)) <<  endl;
  244 :
  245 :
  246 :
  247 :
  248 :  file << real(shift) << " " << imag(shift) << " " << real(eig(j)) << " "ñ¹/ << imag(eig(j)) << endl;
  249 :
  250 :
  251 :  ufc[]=vect(0:ndoff-1,j);
  252 :  xsc[]=vect(ndoff:ndoff+ndofs-1,j);
  253 :  fc[]=Pfe*vect(ndoff+ndofs:ndoft-1,j);
  254 :
  255 :  [ufr,vfr,pfr]=[real(ufc),real(vfc),real(pfc)];
  256 :  [xsr,ysr,usr,vsr]=[real(xsc),real(ysc),real(ufc),real(vfc)];
  257 :  [fr,gr]=[real(fc),real(gc)];
  258 :
  259 :
  260 :  plot(ufr,usr,bb=[[-1,-3],[5,3]],value=1,wait=1,cmm="u-eig="+eig(j));
  261 :  plot(vfr,vsr,bb=[[-1,-3],[5,3]],value=1,wait=1,cmm="v-eig="+eig(j));
  262 :
  263 :  if(real(eig(j))>=0)
  264 :  {
  265 :   ofstream filem("UnstableDirMode-Re-"+Re+"-L-"+L+"-H-"+H+"-K-"+K+"-rho-ñ¹/"+rho+"-shift-"+freqs+".dat",append);
  266 :   filem << ufc[] << endl;
  267 :   filem << xsc[] << endl;
  268 :   filem << fc[] << endl;
  269 :  }
  270 :
  271 : };
  272 : };
  273 :
  274 :
  275 :  sizestack + 1024 =4412  ( 3388 )
 
--- Re        =  100
--- rhos/rhof =  84.7458
--- K         =  0.045
--- Lame-L    =  0
--- Lame-M    =  10000
-------------------------------------------------------
--- shift  = 0
-------------------------------------------------------
  --  mesh:  Nb of Triangles =  21250, Nb of Vertices 10887
  --  mesh:  Nb of Triangles =   1594, Nb of Vertices 949
ndof-fluid   = 96935
ndof-elastic = 598
ndof-solid   = 13964
ndof-total   = 111497
Construction Matrix A-shift B
Assemblage Matrix A-shiftB
  -- Block Matrix NxM = 3x3    nxm  =111497x111497 nb  none zero coef. 2987648
Construction Matrix B
Assemblage B
  -- Block Matrix NxM = 3x3    nxm  =111497x111497 nb  none zero coef. 1132544
Factorisation A- shift B
 Morse matrix GC Precond diag
 BuildSolverMUMPSseq<Complex>
  -- MUMPS LU   n=  111497, peak Mem: 465 Mb sym: 0
Solve Eigenvalue Problem
 raw 53.2755 == 53.2755
 raw 7.52257 == 7.52257
 raw 8.01913 == 8.01913
 raw 4.34567 == 4.34567
 raw 4.34567 == 4.34567
 raw 2.67453 == 2.67453
 raw 2.31369 == 2.31369
 raw 1.4445 == 1.4445
 raw 2.31369 == 2.31369
 raw 1.4445 == 1.4445
Write Eigenvalues/Eigenvectors
-0.0021166 -7.863e-017
-0.0572287 -7.93593e-014
-0.103847 -1.17535e-013
-0.164703 -0.085713
-0.164703 0.085713
-0.20841 1.60013e-012
-0.213518 -0.0413136
-0.213353 -0.0424717
-0.213518 0.0413136
-0.213353 0.0424717
 ######## We forget of deleting   4 Nb pointer,   0Bytes  ,  mpirank 0, memory lñ¹/eak =0
 try getConsole D:\marquet\Documents\Etudes\FSIstability\Two-Meshes\stability\Diñ¹/rEig-FluidSolid-Weak.edp
